(***
  (
    (features (Polymorphic_types Dependent_types Modules Parametric_types Other))
    (reasons (Other))
    (speed Fast)
    (typing Ill_typed) ; because limitation
  )
*)

(*
  We really wish that this could work so that we have polymorphism in
  S, but it doesn't, and we'd have to hoist out the type `a`.
*)
let S = sig
  val t : type -> type
  val f : (a : type) -> a -> t a
end

let F (X <- S) : sig 
  val g : (a : type) -> a -> X.t a (* ERROR: this t a is generated to be different than the t a in f, so we have an error *)
end = struct
  let g = X.f
end

(*
  All following code is well-typed, and we can prove it.
*)

(* The following is when we hoist out `a`, which makes this well-typed. *)
let S a = sig
  val t : type -> type
  val ta = t a
  val f : a -> ta
end

(* now this finally works, but it is not useful *)
let F (type a) (X <- S a) : sig
  val g : a -> X.ta
end = struct
  let g = X.f
end

(* and here is some example usage *)
let Id a = struct
  let t a = a
  let ta = a
  let f x = x
end

let x = (F int (Id int)).g 0
