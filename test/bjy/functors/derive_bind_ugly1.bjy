(**
  (
    (features (Polymorphic_types Dependent_arrows Modules Parametric_types Higher_order_functions Other))
    (reasons (Other))
    (speed Fast)
    (typing Ill_typed) ; because limitation 
  )
*)

(*
  OCaml

    module type BASIC = sig
      type 'a m
      val return : 'a -> 'a m
      val join   : 'a m m -> 'a m
      val map    : 'a m -> ('a -> 'b) -> 'b m
    end


    module Derive_bind (M : BASIC) = struct
      include M
      let bind x f = M.join (M.map x f)
    end
*)

(*
  Parametrized BASIC

  i.e. we hoist the types out, and they must be applied to use the module.

  However, this is horrible because we need an application for each different use of the functions.
  Not only is that annoying, but it's a new application, so it doesn't even work...
*)

let BASIC = (a : type) -> (b : type) -> sig
  val m : type -> type
  val ma = m a
  val mb = m b
  val mma = m ma
  val map  : ma -> (a -> b) -> mb
  val join : mma -> ma
  val return : a -> ma
end

let Id_example : BASIC = fun a b -> struct
  let m a = `Id of a
  let ma = m a
  let mb = m b
  let mma = m (m a)
  let map x f =
    match x with
    | `Id z -> `Id (f z)
    end
  let join x =
    match x with
    | `Id m -> m
    end
  let return x = fun x -> `Id x
end

let Derive_bind (M : BASIC) : (a : type) -> (b : type) -> sig
  val m : type -> type
  val ma = m a
  val mb = m b
  val mma = m ma
  val map  : ma -> (a -> b) -> mb
  val join : mma -> ma
  val return : a -> ma
  val bind : ma -> (a -> mb) -> mb
end = fun a b -> struct 
  let X = M a b
  let m = X.m
  let ma = X.ma
  let mb = X.mb
  let mma = X.mma
  let map = X.map
  let join = X.join
  let return = X.return

  let bind x f =
    let X_map = M a (X.mb) in (* need to be able to map with `m (m b)` return type *)
    let X_join = M b b in (* need to be able to join with `m (m b)` argument type *)
    (* The issue is that now we have several applications of `M`, so these don't correspond, and we fail the wrap check. *)
    X_join.join (X_map.map x f)
end
