(***
  (
    (features (Refinement_types Modules Records Higher_order_functions OOP_style))
    (reasons (Higher_order_functions Records)) ; tried to project from partially applied function
    (speed Fast)
    (typing Ill_typed)
  )
*)
(* has same well-typed version as flyweight_color1 *)

let T = sig
  val t : type
end

let Color : T = struct
  let t = { int | fun i -> i >= 0 && i < 256 }
end

let Common_state : T = struct
  let t = { c : Color.t } (* Say color is the heavy data we need to offload onto a common state *)
end

let Unique_state : T = struct
  let t =
    { x : int
    ; y : int
    ; get_deg : unit -> int } (* all of these fields are unique to an instance of a colored point *)
end

let Colored_point : sig
  val t : type
  val get_color : t -> Color.t
  val make : Common_state.t -> int -> int -> t
end = struct
  let t =
    { intrinsic : Unique_state.t
    ; flyweight : Common_state.t } (* all colored points in this program get the same; common color *)

  let get_color p =
    p.flyweight.c

  let make cs x y =
    let ob =
      fun self ->
        { flyweight = cs
        ; intrinsic =
          { x = x
          ; y = y
          ; get_deg = 
              fun _ ->
                let s = (self self) in
                if s.intrinsic.x == 0 then 0 else
                let tan = s.intrinsic.y / s.intrinsic.x in
                tan - (tan * tan * tan) / 3 + (tan * tan * tan * tan * tan) / 5 (* approx arctan with taylor expansion *)
          }
        } 
    in
    ob ob
end

let dark_color =
  let ob = 
    fun self ->
      { c = 255 }
  in
  ob ob

let _ = Colored_point.get_color (Colored_point.make dark_color) (* ERROR: did not apply coordinate arguments; so `get_color` is passed a function instead of a record *)
