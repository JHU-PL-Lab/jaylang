(*** (
  (features (Higher_order_functions OOP_style Refinement_types Dependent_types Records Match))
  (reasons (Higher_order_functions Match))
  (speed Fast)
  (typing Ill_typed)
) *)
(* has same well-typed version as flyweight_color1 *)

let (Color : { t : type }) =
  { t =
    { int | fun i -> i >= 0 and i < 256 }
  }

let (Common_state : { t : type }) =
  { t = 
    { c : Color.t } (* Say color is the heavy data we need to offload onto a common state *)
  }

let (Unique_state : { t : type }) = 
  { t =
    { x : int
    ; y : int
    ; get_deg : unit -> int } (* all of these fields are unique to an instance of a colored point *)
  }

let (Colored_point : { t : type }) =
  { t =
    { intrinsic : Unique_state.t
    ; flyweight : Common_state.t } (* all colored points in this program get the same; common color *)
  }

let get_color p =
  p.flyweight.c

let make_obj (cs : Common_state.t) (x : int) (y : int) : Colored_point.t =
  let ob =
    fun self ->
      { flyweight = cs
      ; intrinsic =
        { x = x
        ; y = y
        ; get_deg = 
            fun _ ->
              let s = (self self) in
              if s.intrinsic.x == 0 then 0 else
              let tan = s.intrinsic.y / s.intrinsic.x in
              tan - (tan * tan * tan) / 3 + (tan * tan * tan * tan * tan) / 5 (* approx arctan with taylor expansion *)
        }
      } 
  in
  ob ob

let dark_color =
  let ob = 
    fun self ->
      { c = 255 }
  in
  ob ob

let result = get_color (make_obj dark_color) (* ERROR: did not apply coordinate arguments; so `get_color` is passed a function instead of a record *)
