(***
  (
    (features (Polymorphic_types Mu_types Variants Recursive_functions Return_error))
    (reasons (Mu_types Recursive_functions Return_error))
    (speed Fast)
    (typing Ill_typed)
  )
*)
(* flatten the input down to just a list of ints and bools *)

let any_type a = Mu t.
  | `L of list t
  | `A of a

let rec append a b =
  match a with
  | [] -> b
  | hd :: tl -> hd :: append tl b
  end

let rec flatten (type a_) (x : any_type a_) : list a_ =
  match x with
  | `L ls ->
    match ls with
    | [] -> []
    | hd :: tl -> append (flatten a_ hd) tl (* ERROR: should have `(flatten (`L tl))` instead of `tl` *)
    end
  | `A a -> [ a ]
  end
