(***
  (
    (features (Polymorphic_types Recursive_functions Higher_order_functions Other))
    (reasons (Other))
    (speed Fast)
    (typing Ill_typed)
  )
*)
(* type error is that list can be empty and has no last. An `is_nonempty` predicate fixes it. *)

(* y combinator *)
let Y f =
  fun y ->
    (fun x -> f (fun z -> (x x) z))
    (fun x -> f (fun z -> (x x) z))
    y

let last (type a_) (l : list a_) : a_ =
  Y (
    fun self x ->
      match x with
      | x :: xs -> 
        match xs with
        | [] -> x
        | _ -> self xs
        end
      end
      (* ERROR : `l` could be empty *)
  ) l
