(***
  (
    (features (Refinement_types Dependent_arrows Recursive_functions Return_error))
    (reasons (Refinement_types Dependent_arrows Recursive_functions Return_error))
    (speed Fast)
    (typing Ill_typed)
  )
*)

let rec sum x acc = 
  match x with
  | [] -> acc
  | hd :: tl -> sum tl (acc + hd)
  end

let f (x <- list int) : { int | fun a -> (a == (sum x 0))} =
  sum x 1 (* ERROR: acc begins as 1 here when should be 0 *)
    