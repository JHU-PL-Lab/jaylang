(***
  (
    (features (Refinement_types Dependent_types Recursive_functions Return_error))
    (reasons (Refinement_types Dependent_types Return_error))
    (speed Fast)
    (typing Ill_typed)
  )
*)

let rec length x acc = 
  match x with
  | [] -> acc
  | hd :: tl -> length tl (acc + 1)
  end

let rec f (x <- list int) (y <- list int) (z : list int) : { a : list int | (length a 0) == (length x 0) + (length y 0) } =
  match y with
  | [] -> [] (* ERROR: needs to return x to pass the refinement *)
  | _ :: tl -> f y tl z
  end
    