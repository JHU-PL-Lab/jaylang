(***
  (
    (features (Refinement_types Mu_types Variants Records Recursive_functions))
    (reasons (Refinement_types Mu_types))
    (speed Fast)
    (typing Ill_typed)
  )
*)

let tree_type = Mu t.
  | `Node of { left : t ; right : t }
  | `Leaf of { leaf : int }

let max x1 x2 = 
  if x1 > x2 then x1 else x2

let abs n = 
  if n > 0 then n else (0-1) * n

let rec get_height t = 
  match t with
  | `Node node -> max (get_height node.left) (get_height node.right) + 1
  | `Leaf leaf -> 1
  end

let rec is_balanced t = 
  match t with
  | `Node node ->
    is_balanced node.left
    && is_balanced node.right
    && abs (get_height node.left - get_height node.right) <= 1
  | `Leaf leaf -> true
  end

let x : { tree_type | is_balanced } = 
  `Node
  { left = 
    `Node { left = 
            `Node { left = 
                  `Node { left = `Leaf {leaf = 0}
                        ; right = `Leaf {leaf = 0}
                        }
                  ; right = `Leaf {leaf = 0}
                  }
          ; right = `Leaf {leaf = 0}
          }
  ; right = `Leaf { leaf = 0 }
  }
