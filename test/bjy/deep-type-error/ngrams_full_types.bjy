(***
  (
    (features (Polymorphic_types Refinement_types Dependent_types Parametric_types First_class_types Records Recursive_functions Higher_order_functions Usage_error))
    (reasons (Polymorphic_types Records Usage_error))
    (speed Fast)
    (typing Ill_typed)
  )
*)

(* In this test, we have full types on the helper functions, which makes the error quite deep but not that hard to find. It is still fast. *)

let rec t n =
  if n <= 0
  then type
  else type -> t (n - 1)

let pos_int : t 0 = { int | fun i -> i > 0 }

(* Parametric map *)
let map : t 2 = fun a b -> a -> b

(* Parametric bag *)
let bag : t 1 = fun a -> list a

let rec len ls = 
  match ls with
  | [] -> 0
  | hd :: tl -> 1 + len tl
  end

let ngram : int -> t 1 = fun n a -> { list a | fun ls -> (len ls == n) && n >= 0 }

let distribution : int -> t 1 = fun n a -> map (ngram (n - 1) a) (bag a)

let rec take (type a_) (n <- { int | fun i -> i >= 0}) : list a_ -> { list a_ | fun ls -> len ls <= n } =
  fun l ->
    if n == 0 then [] else
    match l with
    | [] -> []
    | hd :: tl ->
      if n == 1
      then [ hd ]
      else hd :: take a_ (n - 1) tl
    end

let make_ngrams (type a_) (n <- pos_int) : list a_ -> list (ngram n a_) =
  fun ls ->
    let rec loop l m =
      match l with
      | [] -> []
      | hd :: tl ->
        if m < n
        then []
        else take a_ n l :: loop tl (m - 1)
      end
    in
    loop ls (len ls)

let rec compare_list (type a_) (compare : a_ -> a_ -> int) (l1 : list a_) (l2 : list a_) : int =
  match l1 with
  | [] ->
    match l2 with
    | [] -> 0
    | _ -> 0 - 1
    end
  | hd :: tl ->
    match l2 with 
    | [] -> 1
    | hd2 :: tl2 ->
      let c = compare hd hd2 in
      if c == 0
      then compare_list a_ compare tl tl2
      else c
    end
  end

let tuple a b = { fst : a ; snd : b }

let rec last_exn (type a_) (ls : { list a_ | fun l -> len l > 0 }) : a_ = 
  match ls with
  | hd :: tl ->
    match tl with
    | [] -> hd
    | _ -> last_exn a_ tl
    end
  end

let bag_map_of_list (type a_ b_) (tup_list : list (tuple a_ b_)) : (a_ -> a_ -> int) -> map a_ (bag b_) =
  fun compare ->
    fun a ->
      let rec loop l =
        match l with
        | [] -> []
        | hd :: tl ->
          if compare hd.fst a == 0
          then hd.snd :: loop tl
          else loop tl
        end
      in
      loop tup_list

let make_dist (type a_) (n <- pos_int) (l : list a_) (compare : a_ -> a_ -> int) : distribution n a_ =
  let ngrams = make_ngrams a_ n l in
  let tup_of_ng ng =
    { fst = last_exn a_ ng ; snd = take a_ (n - 1) ng } (* ERROR: fst and snd are switched here. fst here is a_; but we use compare_list below *)
    (*{ snd = last_exn a_ ng ; fst = take a_ (n - 1) ng }*) (* This is the well-typed version *)
  in
  let rec map_ng_to_tups ls =
    match ls with
    | [] -> []
    | ng :: tl -> tup_of_ng ng :: map_ng_to_tups tl
    end
  in
  bag_map_of_list (ngram (n - 1) a_) a_ (map_ng_to_tups ngrams) (compare_list a_ compare) (* Notice we need to instantiate the types because `bag_map_of_list` is typed *)
