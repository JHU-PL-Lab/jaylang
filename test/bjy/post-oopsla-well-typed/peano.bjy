(***
  (
    (features (Polymorphic_types Refinement_types Dependent_types Mu_types Parametric_types First_class_types Variants Records Recursive_functions))
    (speed Slow)
    (typing Well_typed)
  )
*)

(* This test is slow because there are so many types. It is way faster with parallelism on, which is a good thing! *)

(* These are the possible forms of the type parameter for t *)
let ty = Mu t.
  | `TZero of unit
  | `TSucc of t

(* a "GADT" *)
let rec t (a : ty) : type =
  | `Zero of
    match a with
    | `TZero _ -> unit
    | `TSucc _ -> bottom (* not a valid type parameter for the `Zero constructor *)
    end
  | `Succ of
    match a with
    | `TZero _ -> bottom (* not a valid type parameter for the `Succ constructor *)
    | `TSucc a -> t a
    end

(* concrete, constant example *)
let two_type_param = `TSucc (`TSucc (`TZero {}))
let two_type = t two_type_param
let two : two_type = `Succ (`Succ (`Zero {}))

let rec to_int (a <- ty) (x : t a) : int =
  match x with
  | `Zero _ -> 0
  | `Succ y ->
    match a with
    | `TSucc b -> 1 + to_int b y
    end
  end

(* example usage *)
let _ : { i : int | i == 2 } = to_int two_type_param two

(* of_int with untyped return *)
let rec of_int (i : { i : int | i >= 0 }) : top =
  if i == 0 then 
    `Zero {}
  else
    `Succ (of_int (i - 1))

(* return type as value from result, and also have a predicate to check that it's the inverse of to_int *)
let rec of_int (i <- { i : int | i >= 0 }) : { r : {: a : ty ; v : t a :} | to_int r.a r.v == i } =
  if i == 0 then 
    { a = `TZero {} ; v = `Zero {} }
  else
    let r = of_int (i - 1) in
    { a = `TSucc r.a ; v = `Succ r.v }

let div (a <- ty) (b <- ty) (x : t a) (y : t (`TSucc b)) : {: a : ty ; v : t a :} =
  of_int (to_int a x / to_int (`TSucc b) y)

