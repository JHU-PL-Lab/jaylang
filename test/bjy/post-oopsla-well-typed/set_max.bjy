(***
  (
    (features (Polymorphic_types Refinement_types Dependent_types Parametric_types Records Higher_order_functions))
    (speed Fast)
    (typing Well_typed)
  )
*)

let s : type = int

let t : type -> type =
  fun a ->
    s -> { state : s ; body : a }

let bind (type a b) (x : t a) (f : a -> t b) : t b =
  fun s ->
    let v = x s in
    f v.body v.state

let return (type a) (a : a) : t a =
  fun s -> { state = s ; body = a }

let set s = fun _ -> { state = s ; body = {} }

let read = fun s -> { state = s ; body = s }

let set_max (x <- int) : t { i : int | i >= x } =
  bind int int read (fun max ->
    if max >= x    
    then return int max
    else bind unit int (set x) (fun _ ->
      return int x
    )
  )
