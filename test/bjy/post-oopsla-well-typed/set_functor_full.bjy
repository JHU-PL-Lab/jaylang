(***
  (
    (features (Polymorphic_types Dependent_types Modules Parametric_types Recursive_functions))
    (speed Slow)
    (typing Well_typed)
  )
*)

(* This is a set functor where we can pass in a generic set module 
to extend, not one that works on only e.g. ints.   *)

let F : 
    (S : sig
      val tf : type -> type 
      val a : type
      val t = tf a
      val empty : unit -> t
      val add   : a -> t -> t
    end) -> sig
      val tf : type -> type
      val a : type
      val t = S.t
      val empty   : unit -> S.t
      val add     : S.a -> S.t -> S.t
      val of_list : list S.a -> S.t
    end
  =
  fun S -> struct
    let tf = S.tf
    let a = S.a
    let t = S.t
    let empty = S.empty
    let add = S.add
    let of_list =
      fun ls ->
        let rec loop acc ls =
          match ls with
         | [] -> acc
          | hd :: tl -> loop (S.add hd acc) tl
          end
        in 
        loop (S.empty {}) ls
  end

let M : (a : type) -> sig
  val tf : type -> type 
  val a : type
  val t = tf a
  val empty : unit -> t
  val add   : a -> t -> t
end = fun a ->
  let tf = fun a -> list a in
  let t = tf a in
  struct
    let tf = tf
    let a = a
    let t = t
    let empty = fun mt -> []
    let add = fun a ls -> a :: ls
  end

let MM = F (M int)

let r : MM.t = MM.add 1 (MM.add 2 (MM.empty {}))

let r2 : (MM.tf) int = MM.of_list ([1;2;3;4;5;6;7])

let x : MM.a = 0

let list_is_visible : MM.t = [2]