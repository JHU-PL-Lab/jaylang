(***
  (
    (features (Polymorphic_types Dependent_arrows Modules Parametric_types Recursive_functions))
    (speed Slow)
    (typing Well_typed)
  )
*)

let F : (tf : type -> type) -> (a : type) -> let t = tf a in sig
  val empty : unit -> t
  val add   : a -> t -> t
end -> sig
  val empty : unit -> t
  val add   : a -> t -> t
  val of_list : list a -> t
end = fun tf a M -> struct
  let empty = M.empty
  let add = M.add
  let of_list ls =
    let rec loop acc ls =
      match ls with
      | [] -> acc
      | hd :: tl -> loop (M.add hd acc) tl
      end
    in
    loop (M.empty {}) ls
end

let X =
  let M = struct
    let tf a = list a
    let a = int
    let empty _ = []
    let add a ls = a :: ls
  end
  in
  F M.tf M.a M
