
let s = int

let m a = s -> { state : s ; body : a }

let bind (type a b) (x : m a) (f : a -> m b) : m b =
  fun s ->
    let r = x s in
    f r.body r.state

let modify (f : s -> s) : m unit =
  fun s -> { state = f s ; body = {} }

let read : m s =
  fun s -> { state = s ; body = s }

let sum n =
  (* use the state to sum *)
  let rec loop x =
    if x <= 0
    then read (* read final state, which holds sum *)
    else
      let m = modify (fun i -> i + x) in (* add x to sum *)
      bind unit int m (fun _ ->
        loop (x - 1)
      )
  in
  (loop n 0).body

let x : { i : int | i == 55 } = sum 10

(*
  The following program is REALLY slow (and the above is also quite slow) due to wrapping.
  This is because when we wrap, a function, we check its argument and we use its argument.
  If the argument is a function with a heavy computation, then the computation is done twice
  (because it is done only after getting its input, i.e. both when checked and when used normally).

  When the heavy computation is a recursive function, then the computation is done exponentially
  many times, which explains the extreme increase in runtime as we increase the input from something
  small to even just 10.
  
  For the *above* embedded program with all zero inputs, the step count by input to `sum` is:
    5 -> 16751 steps
    6 -> 33615 steps
    7 -> 67343 steps
    8 -> 134799 steps
    9 -> 269711 steps
    10 -> 539537 steps
  ... confirming the hypothesis about exponential growth in steps.

  However, the embedded program with wrap *off* has this step count:
    5 -> 635 steps
    6 -> 690 steps
    7 -> 745 steps
    8 -> 800 steps
    9 -> 855 steps
    10 -> 909 steps (* the 9 extra steps on the linear increase is due to passing the predicate, which I didn't change when testing *)
  ... also confirming that the exponential growth is due to wrapping.
*)
(* let s = int

let m a = (r : type) -> (a -> s -> r) -> s -> r

let bind (type a b) (x : m a) (f : a -> m b) : m b =
  fun r ->
    fun k s ->
      x r (fun a s -> f a r k s) s

let return (type a) (a : a) : m a =
  fun r ->
    fun k s ->
      k a s

let modify (f : s -> s) : m unit =
  fun r ->
    fun k s ->
      k {} (f s)

let (read : m s) =
  fun r ->
    fun k s ->
      k s s

let sum n =
  (* use the state to sum *)
  let rec loop x =
    if x <= 0
    then read (* read final state, which holds sum *)
    else
      let m = modify (fun i -> i + x) in (* add x to sum *)
      bind unit int m (fun _ ->
        loop (x - 1)
      )
  in
  (loop n)
    int (* result type *)
    (fun res _ -> res) (* extract result *)
    0 (* initial state *)

let (x : { i : int | i == 55 }) = sum 10 *)