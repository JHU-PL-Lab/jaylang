(***
  (
    (features (Polymorphic_types Dependent_types Refinement_types Modules Parametric_types First_class_types Records Recursive_functions Higher_order_functions))
    (speed Fast)
    (typing Well_typed)
  )
*)
(*
Eventually we'd like to work towards writing snapshottable stores:

OCaml code for snapshottable stores
type node = data ref
and data =
  | Mem
  | Diff : 'a Ref.t * 'a * int * node -> data
 
let create () = { root = ref Mem ; gen = 0 }
 
module Ref = struct
  type 'a t = { mutable v : 'a ; mutable g : int }
  let make v = { v ; g = 0 }
  let get _s r = r.v
  let set s r v =
    if r.g = s.gen 
    then r.v <- v
    else
      let root = ref Mem in
      s.root := Diff (r; r.v; r.g; root) ;
      s.root <- root ;
      r.v <- v ;
      r.g <- s.gen
end
 
type store = { mutable root : node ; mutable gen : int }
type snapshot = { root : node ; gen : int }
 
let rec reroot n =
  match !n with
  | Mem -> ()
  | Diff (r; v; g; n') ->
    reroot n' ;
    n := Mem ;
    n' := Diff (r; r.v; r.g; n) ; 
    r.v <- v ;
    r.g <- g ;
 
let capture ({ root ; gen } as store) = 
  let snap = { root ; gen } in
  store.gen <- store.gen + 1 ;
  snap
 
let restore s snap =
  reroot snap.root ;
  s.root <- snap.root
  s.gen <- snap.gen + 1
 
 
Now I need to encode this with the ref monad

We might include something like this:

  let data =
    `Diff of
        {: cell : id.t     (* the id for the ref cell that this diff corresponds to *)
        ; t    : type
        ; val  : t       (* the value that got assigned to the ref cell during this diff *)
        ; gen  : int     (* the generation the diff was done in *)
        ; next : id.t    (* the id for the ref cell of the child of this node *)
        :}
    | `Mem of unit          (* this node is what is currently stored in memory *)

*)

let Id = struct
  let t = `Id of int

  let get x =
    match x with
    | `Id i -> i
    end

  let make i = `Id i

  let eq i1 i2 =
    get i1 == get i2

  let initial = `Id 0
end

let Poly_map = struct
  let t =
    list
      {: key : Id.t
      ; t    : type
      ; data : t
      :}

  let empty = []

  let set map key data_t data = 
    let item = { key = key ; t = data_t ; data = data } in
    let rec insert ls =
      match ls with
      | [] -> [ item ]
      | hd :: tl ->
        if Id.eq key hd.key
        then item :: tl
        else hd :: insert tl
      end
    in
    insert map

  let find map key = 
    let rec look ls =
      match ls with
      | [] -> assume false
      | hd :: tl ->
        if Id.eq key hd.key (* ERROR idea: forgot to project key out of hd *)
        then hd.data
        else look tl
      end
    in
    look map

  let rec size map =
    match ls with
    | [] -> 0
    | hd :: tl -> 1 + size tl
    end
end

let State = struct
  let t =
    { map     : Poly_map.t
    ; next_id : Id.t
    }

  let size t = Poly_map.size t.map

  let is_progression t1 t2 =
    Id.get t2.next_id >= Id.get t1.next_id
    && size t2 >= size t1 (* ERROR idea: I had accidentally switched the order of t1 and t2 in this *)

  let incr_id t =
    { map = t.map ; next_id = Id.make (Id.get t.next_id + 1) }

  let set_map t pm =
    { map = pm ; next_id = t.next_id }
 
  let initial = { map = Poly_map.empty ; next_id = Id.initial }
end

let m a = 
  (s : State.t) ->
    { new_state : { State.t | State.is_progression s }
    ; value     : a
    }

let bind x f =
  fun s ->
    let xs = x s in
    f xs.value xs.new_state

let return a =
  fun s ->
    { new_state = s ; value = a }

let fmap x f = bind x (fun a -> return (f a))

let read =
  fun s ->
    { new_state = s ; value = s }

let run x = (x State.initial).value

let modify f =
  fun s ->
    { new_state = f s ; value = {} }

let deref ref_id =
  let%bind s = read in
  return (Poly_map.find s.map ref_id)

let set_ref ref_id t v =
  modify (fun s ->
    State.set_map 
      s
      (Poly_map.set s.map ref_id t v)
  )

let new_ref t v =
  let%bind s = read in
  let new_id = s.next_id in
  let%bind _ = modify State.incr_id in 
  let%bind _ = set_ref new_id t v in
  return new_id

let res : { i : int | i == 10 } =
  run (
    let%bind ref0_id = new_ref int 2 in
    let%bind ref1_id = new_ref int 3 in
    let%bind ref0_v = deref ref0_id in

    let%bind _ = set_ref ref0_id int (ref0_v * 3 + 1) in
    let%bind ref1_v = deref ref1_id in
    let%bind ref0_v = deref ref0_id in
    return (ref0_v + ref1_v) (* error idea: forgot parentheses here *)
  ) 