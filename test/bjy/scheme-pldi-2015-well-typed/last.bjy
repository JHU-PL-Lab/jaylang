(***
  (
    (features (Polymorphic_types Refinement_types Recursive_functions Higher_order_functions))
    (speed Slow)
    (typing Well_typed)
  )
*)

(* y combinator *)
let Y f =
  fun y ->
    (fun x -> f (fun z -> (x x) z))
    (fun x -> f (fun z -> (x x) z))
    y

let is_nonempty ls =
  match ls with
  | [] -> false
  | _ -> true
  end

let last (type a_) (l : { list a_ | is_nonempty }) : a_ =
  Y (
    fun self x ->
      match x with
      | x :: xs -> 
        match xs with
        | [] -> x
        | _ -> self xs
        end
      end
  ) l