(*** (
  (features (Variants Intersection_types Higher_order_functions OOP_style Records Return_type Match))
) *)

let t : type = (((`A of unit) -> int) & ((`B of unit) -> int) & ((`C of int) -> list int))

let obj : t =
  let ob =
    fun self ->
      fun arg ->
        match arg with
        | `A u -> self self (`B {}) + 10
        | `B u -> 0
        | `C i -> self self (`A {}) :: self self (`B {}) :: [ i ]
        end
  in
  ob ob