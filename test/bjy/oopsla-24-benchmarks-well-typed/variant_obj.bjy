(***
  (
    (features (Dependent_types Variants OOP_style))
    (speed Slow)
    (typing Well_typed)
  )
*)

let t : type = (((`A of unit) -> int) & ((`B of unit) -> int) & ((`C of int) -> list int))

let obj : t =
  let ob =
    fun self ->
      fun arg ->
        match arg with
        | `A u -> self self (`B {}) + 10
        | `B u -> 0
        | `C i -> self self (`A {}) :: self self (`B {}) :: [ i ]
        end
  in
  ob ob