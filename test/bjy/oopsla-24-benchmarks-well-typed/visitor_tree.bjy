(*** (
  (features (Variants Recursive_functions Mu_types Higher_order_functions OOP_style Parametric_types Records Match))
) *)

let (Node : { t : type -> type -> type }) = 
  { t =
    fun a_t ->
      fun tree_t ->
        { v : a_t
        ; children : list tree_t }
  }

let (Leaf : { t : type -> type }) =
  { t = 
    fun a ->
      a
  }

let (Tree : { t : type -> type }) =
  { t =
    fun a ->
      Mu tt. (``Node (Node.t a tt) || ``Leaf (Leaf.t a))
  }

let (Visitor : { t : type -> type -> type }) = 
  { t =
    fun a ->
      fun result_type ->
        { visit_node : Node.t a (Tree.t a) -> result_type 
        ; visit_leaf : Leaf.t a -> result_type }
  }

let (client : type -> type -> type -> type) = fun a t result_type ->
  { self : t
  ; accept : Visitor.t a result_type -> result_type }

let make_list f n = 
  let rec loop i =
    if i == 0
    then []
    else f n :: loop (i - 1)
  in
  loop n

(* Makes big tree recursively with many children *)
let rec make_tree (n : int) : Tree.t int =
  let ob =
    fun self ->
      if n == 0
      then `Leaf 0
      else
        `Node
        { v = n
        ; children = make_list make_tree (n - 1) }
  in
  ob ob

let int_bool_client (tr : Tree.t int) : client int (Tree.t int) bool =
  { self = tr
  ; accept =
    fun vis ->
      match tr with
      | `Leaf leaf -> vis.visit_leaf leaf
      | `Node node -> vis.visit_node node
      end
  }
