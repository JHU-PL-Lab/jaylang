(*** (
  (features (Variants Recursive_functions Mu_types Higher_order_functions OOP_style Parametric_types Records Match))
) *)

let T n = sig
  val t :
    let rec loop i =
      if i <= 0
      then type
      else type -> loop (i - 1)
    in
    loop n
  end

let Node : T 2 = struct
  let t a_t tree_t =
    { v : a_t
    ; children : list tree_t }
end

let Leaf : T 1 = struct
  let t a = a
end

let Tree : T 1 = struct
  let t a = Mu t.
    | `Node of Node.t a t
    | `Leaf of Leaf.t a
end

let Visitor : T 2 = struct
  let t a result_type =
    { visit_node : Node.t a (Tree.t a) -> result_type 
    ; visit_leaf : Leaf.t a -> result_type }
end

let Client : T 3 = struct
  let t a t result_type =
    { self : t
    ; accept : Visitor.t a result_type -> result_type }
end

let make_list f n = 
  let rec loop i =
    if i == 0
    then []
    else f n :: loop (i - 1)
  in
  loop n

(* Makes big tree recursively with many children *)
let rec make_tree (n : int) : Tree.t int =
  let ob =
    fun self ->
      if n == 0
      then `Leaf 0
      else
        `Node
        { v = n
        ; children = make_list make_tree (n - 1) }
  in
  ob ob

let int_bool_client (tr : Tree.t int) : Client.t int (Tree.t int) bool =
  { self = tr
  ; accept =
    fun vis ->
      match tr with
      | `Leaf leaf -> vis.visit_leaf leaf
      | `Node node -> vis.visit_node node
      end
  }
