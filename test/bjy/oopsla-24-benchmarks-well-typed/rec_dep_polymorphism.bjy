(***
  (
    (features (Polymorphic_types Dependent_types Parametric_types First_class_types Recursive_functions))
    (speed Slow)
    (typing Well_typed)
  )
*)

let t : type -> type -> int -> type =
  fun a b i ->
    if i % 2 == 0
    then b
    else a

(* 'a and 'b alternate by call here; so can't assume 'a stays the same in recursive calls *)
let rec f (type a_ b_) (i <- int) (a : a_) (b : b_) : t a_ b_ i =
  if i == 0
  then b
  else f b_ a_ (i - 1) b a

let res = f int bool 2 0 true