(*** (
  (features (Intersection_types Higher_order_functions Subtyping Type_casing Refinement_types Return_type Match))
) *)
(* subtyping of refined intersection type. *)
(* wrap is helpful for catching error; but I'm not sure why *)

let t : type = { ((`Int of int) -> int) & ((`Bool of bool) -> bool) | fun f -> f (`Bool true) }

(* this is a subtype of t *)
let f : t =
  fun x ->
    match x with
    | `Bool b -> true
    | `Int i -> i
    | _ -> 1 :: 2 :: []
    end

let g (h : t) : t =
  fun x -> f x

let x = g f 