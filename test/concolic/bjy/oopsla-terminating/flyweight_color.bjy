let color =
  { t =
    {. int | fun i -> i >= 0 and i < 256 }
  }
in

let unit =
  { t = {: empty : bool :}
  , x = { empty = true } }
in

let common_state =
  { t = 
    {: c : color.t :} # Say color is the heavy data we need to offload onto a common state
  }
in

let unique_state = 
  { t =
    {: x : int
    , y : int
    , get_deg : unit.t -> int :} # all of these fields are unique to an instance of a colored point
  }
in

let colored_point =
  { t =
    {: intrinsic : unique_state.t
     , flyweight : common_state.t :} # all colored points in this program get the same, common color
  }
in

let get_color p =
  p.flyweight.c
in

# ERROR: deg may have divide by zero
let make_obj (cs : common_state.t) (x : int) (y : int) : colored_point.t =
#let make_obj cs x y =
  let ob =
    fun self ->
      { flyweight = cs
      , intrinsic =
        { x = x
        , y = y
        , get_deg = 
            fun ignore_unit ->
              let s = (self self) in
              if s.intrinsic.x == 0 then 0 else # ERROR: projecting label `x` when first need to project `intrinsic`
              let tan = s.intrinsic.y / s.intrinsic.x in
              tan - (tan * tan * tan) / 3 + (tan * tan * tan * tan * tan) / 5 # approx arctan with taylor expansion
        }
      } 
  in
  ob ob
in

let dark_color =
  let ob = 
    fun self ->
      { c = 255 }
  in
  ob ob
in

let result = get_color (make_obj dark_color 10 20) # ERROR: forgot to apply coordinates
in

result